{"version":3,"sources":["main/Loading.js","main/Api.js","main/Search.js","main/ScreenItem.js","main/Screen.js","main/band.js","App.js","serviceWorker.js","index.js"],"names":["Loading","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","type","color","width","a","allBandPosts","url","access_token","process","axios","get","then","res","data","result_data","bands","band_key","catch","error","console","log","get_band_url","get_next_band_url","nextPage","concat","items","paging","next_params","after","Search","props","setKeyword","e","value","target","setState","keyword","onKeyupSearch","keyCode","onSearch","state","this","display","justifyContent","alignItems","margin","Image","src","size","Input","fluid","icon","iconPosition","placeholder","marginBottom","onChange","onKeyUp","Button","onClick","Component","ScreenItem","handlePagination","page","getAttribute","imagePage","item","Row","Card","Header","content","photos","length","wrapped","ui","Description","Pagination","boundaryRange","ellipsisItem","firstItem","lastItem","siblingRange","activePage","totalPages","Screen","getBandData","allData","map","idx","slice","replace","lastIndexOf","key","window","location","reload","band","setSearchKeyword","searchKeyword","microBandData","localStorage","JSON","parse","microBandCreated","Date","now","getTime","NaverBandApi","stringify","Container","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uRAmBeA,EAfC,WACd,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,SAASC,MAAO,CAAEC,OAAQ,SAAWC,cAAc,UACjE,kBAACJ,EAAA,EAAKK,OAAN,CAAaH,MAAO,CAAEI,SAAU,MAC9B,kBAAC,IAAD,CACEC,KAAK,SACLC,MAAM,UACNL,OAAQ,MACRM,MAAO,W,2CCVjB,wBAAe,0CAAAC,EAAA,6DACTC,EAAe,GAIbC,EALO,0DAIPC,EAAeC,oHAJR,SAMUC,IACpBC,IAAIJ,GACJK,MAAK,SAACC,GACL,OAAOA,EAAIC,KAAKC,YAAYC,MAAM,GAAGC,YAEtCC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,MAZH,UAMPF,EANO,gDAcSX,GAdT,OAiBPgB,EAjBO,6DAiB8Dd,EAjB9D,qBAiBuFS,EAjBvF,iBAmBTM,EAAoB,GACpBC,EAAW,KApBF,eAwBXD,EACe,OAAbC,EAAoBF,EAAeA,EAAY,iBAAaE,GAzBnD,UA2Bed,IACvBC,IAAIY,GACJX,MAAK,SAACC,GACL,OAAOA,EAAIC,KAAKC,eAEjBG,OAAM,SAAUC,GACfC,QAAQC,IAAIF,MAjCL,WA2BLJ,EA3BK,+DAsCXT,EAAeA,EAAamB,OAAOV,EAAYW,OAGR,OAAnCX,EAAYY,OAAOC,YAzCZ,qDA0CXJ,EAAWT,EAAYY,OAAOC,YAAYC,MA1C/B,iDA6CNvB,GA7CM,4C,2BCgEAwB,E,kDA9Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,WAAa,SAACC,GAAO,IACXC,EAAUD,EAAEE,OAAZD,MACR,EAAKE,SAAS,CAAEC,QAASH,KATR,EAYnBI,cAAgB,SAACL,GACG,KAAdA,EAAEM,SACN,EAAKR,MAAMS,SAAS,EAAKC,MAAMJ,UAZ/B,EAAKI,MAAQ,CACXJ,QAAS,IAHM,E,qDAiBT,IAAD,OACCG,EAAaE,KAAKX,MAAlBS,SAER,OACE,kBAAC7C,EAAA,EAAD,CACEC,UAAU,SACVC,MAAO,CAAEC,OAAQ,SACjBC,cAAc,UAEd,kBAACJ,EAAA,EAAKK,OAAN,CAAaH,MAAO,CAAEI,SAAU,MAC9B,yBACEJ,MAAO,CACL8C,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,OAAQ,QAGV,kBAACC,EAAA,EAAD,CAAOC,IAAI,wBAAwBC,KAAK,WACxC,kBAACF,EAAA,EAAD,CAAOC,IAAI,uBAAuBC,KAAK,UAGzC,kBAACC,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,WACLC,aAAa,OACbC,YAAY,yCACZzD,MAAO,CAAE0D,aAAc,MAAOzD,OAAQ,QACtC0D,SAAU,SAACvB,GAAD,OAAO,EAAKD,WAAWC,IACjCwB,QAAS,SAACxB,GAAD,OAAO,EAAKK,cAAcL,MAErC,kBAACyB,EAAA,EAAD,CACEvD,MAAM,SACNgD,OAAK,EACLF,KAAK,QACLU,QAAS,kBAAMnB,EAAS,EAAKC,MAAMJ,WAJrC,gB,GAjDWuB,a,kBC2DNC,E,kDA1Db,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IAMR+B,iBAAmB,SAAC7B,GAClB,IAAM8B,EAAO9B,EAAEE,OAAO6B,aAAa,SACnC,EAAK5B,SAAS,CAAE6B,UAAWF,KAP3B,EAAKtB,MAAQ,CACXwB,UAAW,GAHI,E,qDAYT,IACAC,EAASxB,KAAKX,MAAdmC,KAER,OACE,kBAACvE,EAAA,EAAKwE,IAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,KAAcH,EAAKI,SAEK,IAAvBJ,EAAKK,OAAOC,OACX,kBAACzB,EAAA,EAAD,CACEC,IAAKkB,EAAKK,OAAO7B,KAAKD,MAAMwB,UAAY,GAAG1D,IAC3CkE,SAAO,EACPC,IAAI,IAGN,GAGDR,EAAKK,OAAOC,OAAS,EACpB,kBAACJ,EAAA,EAAKO,YAAN,CACE9E,MAAO,CACL8C,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,kBAAC+B,EAAA,EAAD,CACEC,cAAe,EACfC,aAAc,KACdC,UAAW,KACXC,SAAU,KACVC,aAAc,EACdC,WAAYxC,KAAKD,MAAMwB,UACvBkB,WAAYjB,EAAKK,OAAOC,OACxBb,QAASjB,KAAKoB,oBAIlB,S,GAnDaF,aC4CVwB,E,4MA1CbC,YAAc,SAACC,EAASjD,GAYtB,OATYiD,EAAQC,KAAI,SAACrB,EAAMsB,GAI7B,GAHgBtB,EAAKI,QAClBmB,MAAM,EAAG,IACTC,QAAQ,kBAAmB,SAClBC,YAAYtD,GAAW,EACjC,OAAO,kBAAC,EAAD,CAAYuD,IAAKJ,EAAKtB,KAAMA,Q,uDAO/B,IAAD,EACsBxB,KAAKX,MAA1BuD,EADD,EACCA,QAASjD,EADV,EACUA,QAEjB,OACE,kBAAC1C,EAAA,EAAD,CACEC,UAAU,SACVC,MAAO,CAAEC,OAAQ,SACjBC,cAAc,UAEb2C,KAAK2C,YAAYC,EAASjD,GAC3B,kBAAC1C,EAAA,EAAKwE,IAAN,KACE,kBAACT,EAAA,EAAD,CACEvD,MAAM,SACNgD,OAAK,EACLF,KAAK,QACLU,QAAS,WACPkC,OAAOC,SAASC,QAAO,KAL3B,kC,GA3BWnC,aC0ENoC,E,kDArEb,WAAYjE,GAAQ,IAAD,8BACjB,cAAMA,IASRkE,iBAAmB,SAAC5D,GAClB,EAAKD,SAAS,CAAE8D,cAAe7D,KAR/B,EAAKI,MAAQ,CACXnC,aAAc,GACd4F,cAAe,MALA,E,gEAcE,IAAD,OACdC,EAAgBC,aAAaD,cAC7BE,KAAKC,MAAMF,aAAaD,eACxB,KACAI,EAAmBH,aAAaD,cAChC,IAAIK,KAAKJ,aAAaG,kBACtB,KAEJ,GAAIJ,EAAe,CACjB,IAAMM,EAAM,IAAID,MACEC,EAAIC,UAAYH,EAAiBG,WAAa,IAG/C,GACfC,IAAe/F,MAAK,SAACE,GACnBsF,aAAaD,cAAgBE,KAAKO,UAChCR,aAAaD,eAEfC,aAAaG,iBAAmBE,EAChC,EAAKrE,SAAS,CAAE9B,aAAcQ,OAIlC4B,KAAKN,SAAS,CAAE9B,aAAc6F,SAE9BQ,IAAe/F,MAAK,SAACE,GACnBsF,aAAaD,cAAgBE,KAAKO,UAAU9F,GAC5CsF,aAAaG,iBAAmB,IAAIC,KACpC,EAAKpE,SAAS,CAAE9B,aAAcQ,S,+BAK1B,IAAD,EACiC4B,KAAKD,MAArCnC,EADD,EACCA,aAAc4F,EADf,EACeA,cAEtB,OACE,kBAACW,EAAA,EAAD,KAC2B,IAAxBvG,EAAakE,OACZ0B,EAEE,kBAAC,EAAD,CAAQZ,QAAShF,EAAc+B,QAAS6D,IAGxC,kBAAC,EAAD,CAAQ1D,SAAUE,KAAKuD,mBAIzB,kBAAC,EAAD,W,GA/DSrC,aCCJkD,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BlB,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MACvB,2D,OCZNC,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5G,MAAK,SAAA6G,GACJA,EAAaC,gBAEdxG,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwG,c","file":"static/js/main.f426f0ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <Grid textAlign=\"center\" style={{ height: \"100vh\" }} verticalAlign=\"middle\">\r\n      <Grid.Column style={{ maxWidth: 200 }}>\r\n        <ReactLoading\r\n          type=\"spokes\"\r\n          color=\"#9cff57\"\r\n          height={\"90%\"}\r\n          width={\"90%\"}\r\n        />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import axios from \"axios\";\r\n\r\nexport default async () => {\r\n  let allBandPosts = [];\r\n\r\n  //    네이버 밴드키 가져오기\r\n  const access_token = process.env.REACT_APP_NAVER_BAND_KEY;\r\n  const url = `https://openapi.band.us/v2.1/bands?access_token=${access_token}`;\r\n  const band_key = await axios\r\n    .get(url)\r\n    .then((res) => {\r\n      return res.data.result_data.bands[0].band_key;\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  if (!band_key) return allBandPosts;\r\n\r\n  //   네이버 밴드글 데이터 가져오기\r\n  const get_band_url = `https://openapi.band.us/v2/band/posts?access_token=${access_token}&band_key=${band_key}&locale=en_kr`;\r\n\r\n  let get_next_band_url = \"\";\r\n  let nextPage = null;\r\n\r\n  while (true) {\r\n    // 다음 페이지가 있을 경우 after파라미터 추가\r\n    get_next_band_url =\r\n      nextPage === null ? get_band_url : get_band_url + `&after=${nextPage}`;\r\n\r\n    const result_data = await axios\r\n      .get(get_next_band_url)\r\n      .then((res) => {\r\n        return res.data.result_data;\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    // 데이터를 못가져오는경우\r\n    if (!result_data) break;\r\n\r\n    allBandPosts = allBandPosts.concat(result_data.items);\r\n\r\n    // 다음페이지가 없을 경우 종료\r\n    if (result_data.paging.next_params === null) break;\r\n    nextPage = result_data.paging.next_params.after;\r\n  }\r\n\r\n  return allBandPosts;\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Grid, Button, Input, Image } from \"semantic-ui-react\";\r\n\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      keyword: \"\",\r\n    };\r\n  }\r\n\r\n  setKeyword = (e) => {\r\n    const { value } = e.target;\r\n    this.setState({ keyword: value });\r\n  };\r\n\r\n  onKeyupSearch = (e) => {\r\n    if (e.keyCode !== 13) return;\r\n    this.props.onSearch(this.state.keyword);\r\n  };\r\n\r\n  render() {\r\n    const { onSearch } = this.props;\r\n\r\n    return (\r\n      <Grid\r\n        textAlign=\"center\"\r\n        style={{ height: \"100vh\" }}\r\n        verticalAlign=\"middle\"\r\n      >\r\n        <Grid.Column style={{ maxWidth: 450 }}>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              alignItems: \"center\",\r\n              margin: \"5px\",\r\n            }}\r\n          >\r\n            <Image src=\"./icon/multi_icon.png\" size=\"medium\"></Image>\r\n            <Image src=\"./icon/band_icon.png\" size=\"tiny\"></Image>\r\n          </div>\r\n\r\n          <Input\r\n            fluid\r\n            icon=\"question\"\r\n            iconPosition=\"left\"\r\n            placeholder=\"뭣이 궁금헌디?\"\r\n            style={{ marginBottom: \"5px\", height: \"45px\" }}\r\n            onChange={(e) => this.setKeyword(e)}\r\n            onKeyUp={(e) => this.onKeyupSearch(e)}\r\n          />\r\n          <Button\r\n            color=\"orange\"\r\n            fluid\r\n            size=\"large\"\r\n            onClick={() => onSearch(this.state.keyword)}\r\n          >\r\n            Search\r\n          </Button>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport { Grid, Card, Pagination, Image } from \"semantic-ui-react\";\r\n\r\nclass ScreenItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      imagePage: 1,\r\n    };\r\n  }\r\n\r\n  handlePagination = (e) => {\r\n    const page = e.target.getAttribute(\"value\");\r\n    this.setState({ imagePage: page });\r\n  };\r\n\r\n  render() {\r\n    const { item } = this.props;\r\n\r\n    return (\r\n      <Grid.Row>\r\n        <Card>\r\n          <Card.Header>{item.content}</Card.Header>\r\n          {/* 이미지가 없는 글도 있을 수 있음 */}\r\n          {item.photos.length !== 0 ? (\r\n            <Image\r\n              src={item.photos[this.state.imagePage - 1].url}\r\n              wrapped\r\n              ui={false}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {/* 이미지가 많은 글도 있을 수 있음 */}\r\n          {item.photos.length > 1 ? (\r\n            <Card.Description\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Pagination\r\n                boundaryRange={0}\r\n                ellipsisItem={null}\r\n                firstItem={null}\r\n                lastItem={null}\r\n                siblingRange={2}\r\n                activePage={this.state.imagePage}\r\n                totalPages={item.photos.length}\r\n                onClick={this.handlePagination}\r\n              />\r\n            </Card.Description>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Card>\r\n      </Grid.Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScreenItem;\r\n","import React, { Component } from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport ScreenItem from \"./ScreenItem\";\r\n\r\nclass Screen extends Component {\r\n  getBandData = (allData, keyword) => {\r\n    let band_item = [];\r\n\r\n    band_item = allData.map((item, idx) => {\r\n      const content = item.content\r\n        .slice(0, 20)\r\n        .replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\");\r\n      if (content.lastIndexOf(keyword) > 0) {\r\n        return <ScreenItem key={idx} item={item} />;\r\n      }\r\n    });\r\n\r\n    return band_item;\r\n  };\r\n\r\n  render() {\r\n    const { allData, keyword } = this.props;\r\n\r\n    return (\r\n      <Grid\r\n        textAlign=\"center\"\r\n        style={{ height: \"100vh\" }}\r\n        verticalAlign=\"middle\"\r\n      >\r\n        {this.getBandData(allData, keyword)}\r\n        <Grid.Row>\r\n          <Button\r\n            color=\"orange\"\r\n            fluid\r\n            size=\"large\"\r\n            onClick={() => {\r\n              window.location.reload(true);\r\n            }}\r\n          >\r\n            뒤로가자\r\n          </Button>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Screen;\r\n","import React, { Component } from \"react\";\r\nimport { Container } from \"semantic-ui-react\";\r\n\r\nimport Loading from \"./Loading\";\r\nimport NaverBandApi from \"./Api\";\r\nimport Search from \"./Search\";\r\nimport Screen from \"./Screen\";\r\n\r\nclass band extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      allBandPosts: [],\r\n      searchKeyword: null,\r\n    };\r\n  }\r\n\r\n  // 검색시 검색 키워드 설정\r\n  setSearchKeyword = (keyword) => {\r\n    this.setState({ searchKeyword: keyword });\r\n  };\r\n\r\n  componentDidMount() {\r\n    let microBandData = localStorage.microBandData\r\n      ? JSON.parse(localStorage.microBandData)\r\n      : null;\r\n    let microBandCreated = localStorage.microBandData\r\n      ? new Date(localStorage.microBandCreated)\r\n      : null;\r\n\r\n    if (microBandData) {\r\n      const now = new Date();\r\n      var fiveMinute = (now.getTime() - microBandCreated.getTime()) / 60000;\r\n\r\n      // 5분마다 API데이터 갱신\r\n      if (fiveMinute > 5) {\r\n        NaverBandApi().then((data) => {\r\n          localStorage.microBandData = JSON.stringify(\r\n            localStorage.microBandData\r\n          );\r\n          localStorage.microBandCreated = now;\r\n          this.setState({ allBandPosts: data });\r\n        });\r\n      }\r\n\r\n      this.setState({ allBandPosts: microBandData });\r\n    } else {\r\n      NaverBandApi().then((data) => {\r\n        localStorage.microBandData = JSON.stringify(data);\r\n        localStorage.microBandCreated = new Date();\r\n        this.setState({ allBandPosts: data });\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { allBandPosts, searchKeyword } = this.state;\r\n\r\n    return (\r\n      <Container>\r\n        {allBandPosts.length !== 0 ? (\r\n          searchKeyword ? (\r\n            // 검색 했을경우\r\n            <Screen allData={allBandPosts} keyword={searchKeyword} />\r\n          ) : (\r\n            // 기본 화면\r\n            <Search onSearch={this.setSearchKeyword} />\r\n          )\r\n        ) : (\r\n          // 데이터를 가지고 올 때 까지 로딩\r\n          <Loading />\r\n        )}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default band;\r\n","import React from \"react\";\nimport \"./App.css\";\n// import Band from \"./band/band\";\nimport Band from \"./main/band\";\n\nfunction App() {\n  return <Band />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}