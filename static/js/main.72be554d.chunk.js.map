{"version":3,"sources":["band/bandItem.js","band/band.js","App.js","serviceWorker.js","index.js"],"names":["bandItem","props","state","page","photo_url","this","item","photos","url","Image","className","src","alt","Component","band","activeItem","band_item","lodding","band_data","apiPage","handleItemClick","bind","handlePagination","map","content","replace","lastIndexOf","push","a","setState","access_token","process","axios","get","then","res","data","result_data","bands","band_key","get_band_url","get_next_band_url","i","concat","items","paging","next_params","after","getBandData","fetchData","e","target","textContent","getAttribute","Menu","pointing","Item","width","height","name","active","onClick","Container","textAlign","Header","as","Pagination","boundaryRange","activePage","ellipsisItem","firstItem","lastItem","siblingRange","totalPages","length","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.72be554d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Image } from \"semantic-ui-react\";\r\n\r\nclass bandItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      page: 1,\r\n    };\r\n  }\r\n  render() {\r\n    const photo_url = this.props.item.photos[0].url;\r\n    return <Image className=\"imageBox\" src={photo_url} alt=\"\" />;\r\n  }\r\n}\r\n\r\nexport default bandItem;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport BandItem from \"./bandItem\";\r\nimport { Container, Menu, Image, Pagination, Header } from \"semantic-ui-react\";\r\nimport \"./band.css\";\r\n\r\nclass band extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeItem: \"식단표\",\r\n      band_item: null,\r\n      lodding: false,\r\n      band_data: null,\r\n      page: 1,\r\n      apiPage: null,\r\n    };\r\n\r\n    this.handleItemClick = this.handleItemClick.bind(this);\r\n    this.handlePagination = this.handlePagination.bind(this);\r\n  }\r\n\r\n  getBandData(activeItem) {\r\n    let band_item = [];\r\n\r\n    this.state.band_data.map((item) => {\r\n      const content = item.content.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\");\r\n      if (content.lastIndexOf(activeItem) > 0) {\r\n        band_item.push(item);\r\n      }\r\n    });\r\n    return band_item;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const fetchData = async () => {\r\n      // 데이터 가져오기 시작\r\n      this.setState({ lodding: true });\r\n      //    네이버 밴드키 가져오기\r\n      const access_token = process.env.REACT_APP_NAVER_BAND_KEY;\r\n      const url = `${process.env.REACT_APP_PROXY}/v2.1/bands?access_token=${access_token}`;\r\n      const band_key = await axios.get(url).then((res) => {\r\n        return res.data.result_data.bands[0].band_key;\r\n      });\r\n\r\n      //   네이버 밴드글 데이터 가져오기\r\n      const get_band_url = `${process.env.REACT_APP_PROXY}/v2/band/posts?access_token=${access_token}&band_key=${band_key}&locale=en_kr`;\r\n\r\n      let band_data = [];\r\n      let get_next_band_url = \"\";\r\n\r\n      for (var i = 0; i < 50; i++) {\r\n        //양이 많지않아 50페이지 까지만 탐색\r\n        get_next_band_url =\r\n          this.state.apiPage === null\r\n            ? get_band_url\r\n            : get_band_url + `&after=${this.state.apiPage}`;\r\n\r\n        const result_data = await axios.get(get_next_band_url).then((res) => {\r\n          return res.data.result_data;\r\n        });\r\n\r\n        band_data = band_data.concat(result_data.items);\r\n        // 다음페이지가 없을 경우 종료\r\n        if (result_data.paging.next_params === null) break;\r\n        // 다음페이지가 있다면\r\n        this.setState({ apiPage: result_data.paging.next_params.after });\r\n      }\r\n\r\n      this.setState({ band_data: band_data });\r\n      this.setState({ band_item: this.getBandData(\"식단표\") });\r\n\r\n      // 데이터 가져오기 종료\r\n      this.setState({ lodding: false });\r\n    };\r\n\r\n    fetchData();\r\n  }\r\n\r\n  handleItemClick(e) {\r\n    const activeItem = e.target.textContent;\r\n    this.setState({ activeItem: activeItem });\r\n    this.setState({ page: 1 });\r\n    this.setState({ band_item: this.getBandData(activeItem) });\r\n  }\r\n\r\n  handlePagination(e) {\r\n    const page = e.target.getAttribute(\"value\");\r\n    this.setState({ page: page });\r\n  }\r\n\r\n  render() {\r\n    const page = this.state.page;\r\n    const band_item = this.state.band_item;\r\n    const activeItem = this.state.activeItem;\r\n    return (\r\n      <div>\r\n        <Menu pointing>\r\n          <Menu.Item>\r\n            <Image src=\"./mutitext.png\" width=\"120px\" height=\"50px\" alt=\"\" />\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            name=\"식단표\"\r\n            active={activeItem === \"식단표\"}\r\n            onClick={this.handleItemClick}\r\n          />\r\n          <Menu.Item\r\n            name=\"시간표\"\r\n            active={activeItem === \"시간표\"}\r\n            onClick={this.handleItemClick}\r\n          />\r\n          <Menu.Item\r\n            name=\"출석표\"\r\n            active={activeItem === \"출석표\"}\r\n            onClick={this.handleItemClick}\r\n          />\r\n        </Menu>\r\n\r\n        <Container textAlign=\"center\" className=\"box\">\r\n          <Header as=\"h1\">{activeItem}</Header>\r\n          {/* band_item이 null인 경우는 오류발생함 */}\r\n          {band_item !== null ? <BandItem item={band_item[page - 1]} /> : \"\"}\r\n\r\n          {band_item !== null ? (\r\n            <Pagination\r\n              boundaryRange={0}\r\n              activePage={this.state.page}\r\n              ellipsisItem={null}\r\n              firstItem={null}\r\n              lastItem={null}\r\n              siblingRange={2}\r\n              totalPages={band_item.length}\r\n              onClick={this.handlePagination}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default band;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Band from \"./band/band\";\n\nfunction App() {\n  return <Band />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}